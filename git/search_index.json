[["index.html", "Python and R for Data Science A Bilingual Learning Approach for Beginners ", " Python and R for Data Science A Bilingual Learning Approach for Beginners Teresia Mrema Buza 2025-03-14 "],["preface.html", "Preface", " Preface In recent years, AI has made significant advancements, with tools like ChatGPT and automated coding assistants becoming widely available. These technologies can accelerate coding, automate data analysis, and even generate complex models. However, a well-structured, human-curated approach remains essential for ensuring accuracy, interpretability, and ethical considerations in data science. Python and R are two of the most popular programming languages in data science, each with unique strengths. Python is known for its simplicity, versatility, and powerful libraries like pandas, numpy, matplotlib, and scikit-learn, which make data manipulation, visualization, and machine learning accessible. It integrates well with various technologies, making it ideal for both beginners and experienced data scientists. R, designed specifically for data analysis and visualization, excels at statistical modeling and high-quality graphical representations with libraries like ggplot2, dplyr, and caret. It is widely used in academic research and industries requiring robust statistical analysis. This book presents Python and R solutions side by side, allowing learners to appreciate the strengths of each language. The content is structured in a Q&amp;A format, which begins with the essential tasks needed to get started, such as setting up your development environment, organizing your project directory, and loading your first dataset. In the beginner version, these initial steps are designed to help you quickly understand how to use VSCode, get your project organized, and take your first steps into data science with Python and R. By working through this guide, learners will build a solid foundation in data science using both Python and R, preparing them for real-world applications where AI-generated insights should be complemented by human expertise in interpreting, refining, and validating results. "],["set-project-dir.html", "1 How to Set Up Your Project Directory in Python and R 1.1 Python Code 1.2 R Code", " 1 How to Set Up Your Project Directory in Python and R Explanation A well-organized project directory is key to efficient data science work. In this section, you will set up a project directory with separate folders for your datasets and scripts. ## Loading required package: tidyverse ## ── Attaching core tidyverse packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.4 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.4 ## ── Conflicts ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors 1.1 Python Code import os # Define project structure project_dir = &#39;./&#39; data_dir = os.path.join(project_dir, &#39;data&#39;) scripts_dir = os.path.join(project_dir, &#39;scripts&#39;) # images_dir = os.path.join(project_dir, &#39;images&#39;) output_dir = os.path.join(project_dir, &#39;output&#39;) # Create directories os.makedirs(data_dir, exist_ok=True) os.makedirs(scripts_dir, exist_ok=True) # os.makedirs(images_dir, exist_ok=True) os.makedirs(output_dir, exist_ok=True) print(f&quot;Project directory structure created at {project_dir}&quot;) Project directory structure created at ./ 1.2 R Code # Define project structure project_dir &lt;- &quot;./&quot; data_dir &lt;- file.path(project_dir, &quot;data&quot;) scripts_dir &lt;- file.path(project_dir, &quot;scripts&quot;) images_dir &lt;- file.path(project_dir, &quot;images&quot;) output_dir &lt;- file.path(project_dir, &quot;output&quot;) # Create directories dir.create(data_dir, showWarnings = FALSE) dir.create(scripts_dir, showWarnings = FALSE) dir.create(images_dir, showWarnings = FALSE) dir.create(output_dir, showWarnings = FALSE) cat(&quot;Project directory structure created at&quot;, project_dir, &quot;\\n&quot;) Project directory structure created at ./ "],["how-to-save-a-dataset-in-python-and-r.html", "2 How to Save a Dataset in Python and R 2.1 Python Code 2.2 R Code", " 2 How to Save a Dataset in Python and R Explanation Saving datasets is essential for storing processed data, sharing results, and reusing data in later analysis. In Python, we commonly use pandas to save datasets in CSV format. In R, readr::write_csv() and write.csv() are common functions for saving datasets. 2.1 Python Code import pandas as pd from sklearn.datasets import load_iris # Load the full iris dataset iris = load_iris(as_frame=True) df = iris.frame # Converts to DataFrame # Add species names df[&quot;species&quot;] = df[&quot;target&quot;].map({0: &quot;setosa&quot;, 1: &quot;versicolor&quot;, 2: &quot;virginica&quot;}) # Save dataset with all columns df.to_csv(&quot;data/iris.csv&quot;, index=False) print(&quot;Dataset saved as &#39;data/iris.csv&#39;&quot;) Dataset saved as &#39;data/iris.csv&#39; 2.2 R Code # Load necessary libraries library(readr) # Load the full iris dataset df &lt;- datasets::iris # Save the dataset with species included using write_csv from readr write_csv(df, &quot;data/iris.csv&quot;) # Confirmation message print(&quot;Dataset saved as &#39;data/iris.csv&#39;&quot;) [1] &quot;Dataset saved as &#39;data/iris.csv&#39;&quot; "],["loading-a-dataset.html", "3 How to Load a Dataset in Python and R 3.1 Python Code 3.2 R Code", " 3 How to Load a Dataset in Python and R Explanation After saving a dataset, we often need to load it back into our program for analysis. In Python, pandas.read_csv() is commonly used to load CSV files. In R, we use read_csv() or readr::read_csv() to achieve the same result. 3.1 Python Code import pandas as pd # Load dataset from CSV file df = pd.read_csv(&quot;data/iris.csv&quot;) # Display the first few rows print(df.head()) sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) \\ 0 5.1 3.5 1.4 0.2 1 4.9 3.0 1.4 0.2 2 4.7 3.2 1.3 0.2 3 4.6 3.1 1.5 0.2 4 5.0 3.6 1.4 0.2 target species 0 0 setosa 1 0 setosa 2 0 setosa 3 0 setosa 4 0 setosa 3.2 R Code # Load necessary library library(readr) # Load dataset from CSV file df &lt;- read_csv(&quot;data/iris.csv&quot;) # Display the first few rows head(df) # A tibble: 6 × 5 Sepal.Length Sepal.Width Petal.Length Petal.Width Species &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 4 4.6 3.1 1.5 0.2 setosa 5 5 3.6 1.4 0.2 setosa 6 5.4 3.9 1.7 0.4 setosa "],["checking-dataset-structure.html", "4 How to Check the Structure of a Dataset in Python and R 4.1 Python Code 4.2 R Code", " 4 How to Check the Structure of a Dataset in Python and R Explanation Understanding a dataset’s structure helps in selecting the right data processing techniques. In Python, df.info() provides an overview of column names, data types, and missing values. In R, str(df) serves the same purpose. 4.1 Python Code import pandas as pd # Load dataset df = pd.read_csv(&quot;data/iris.csv&quot;) # Display dataset structure print(df.info()) &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 150 entries, 0 to 149 Data columns (total 5 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Sepal.Length 150 non-null float64 1 Sepal.Width 150 non-null float64 2 Petal.Length 150 non-null float64 3 Petal.Width 150 non-null float64 4 Species 150 non-null object dtypes: float64(4), object(1) memory usage: 6.0+ KB None 4.2 R Code # Load necessary library library(readr) # Load dataset from CSV file df &lt;- read_csv(&quot;data/iris.csv&quot;) # Display dataset structure str(df) spc_tbl_ [150 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) $ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... $ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... $ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... $ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... $ Species : chr [1:150] &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; ... - attr(*, &quot;spec&quot;)= .. cols( .. Sepal.Length = col_double(), .. Sepal.Width = col_double(), .. Petal.Length = col_double(), .. Petal.Width = col_double(), .. Species = col_character() .. ) - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; "],["summary-statistics.html", "5 How to View Summary Statistics of a Dataset in Python and R 5.1 Python Code 5.2 R Code", " 5 How to View Summary Statistics of a Dataset in Python and R Explanation Summary statistics provide insights into the dataset, such as the mean, median, min, max, and quartiles for numerical columns. In Python, df.describe() gives a quick statistical summary. In R, summary(df) does the same. 5.1 Python Code import pandas as pd # Load dataset df = pd.read_csv(&quot;data/iris.csv&quot;) # Display summary statistics print(df.describe()) Sepal.Length Sepal.Width Petal.Length Petal.Width count 150.000000 150.000000 150.000000 150.000000 mean 5.843333 3.057333 3.758000 1.199333 std 0.828066 0.435866 1.765298 0.762238 min 4.300000 2.000000 1.000000 0.100000 25% 5.100000 2.800000 1.600000 0.300000 50% 5.800000 3.000000 4.350000 1.300000 75% 6.400000 3.300000 5.100000 1.800000 max 7.900000 4.400000 6.900000 2.500000 5.2 R Code # Load necessary library library(readr) # Load dataset from CSV file df &lt;- read_csv(&quot;data/iris.csv&quot;) # Display summary statistics summary(df) Sepal.Length Sepal.Width Petal.Length Petal.Width Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 Median :5.800 Median :3.000 Median :4.350 Median :1.300 Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 Species Length:150 Class :character Mode :character "],["checking-for-missing-values.html", "6 How to Check for Missing Values in a Dataset in Python and R 6.1 Python Code 6.2 R Code", " 6 How to Check for Missing Values in a Dataset in Python and R Explanation Missing values can affect data analysis and machine learning models, so it’s important to detect them. In Python, df.isnull().sum() shows the number of missing values per column. In R, colSums(is.na(df)) performs a similar check. 6.1 Python Code import pandas as pd # Load dataset df = pd.read_csv(&quot;data/iris.csv&quot;) # Check for missing values print(df.isnull().sum()) sepal length (cm) 0 sepal width (cm) 0 petal length (cm) 0 petal width (cm) 0 target 0 species 0 dtype: int64 6.2 R Code # Load necessary library library(readr) # Load dataset from CSV file df &lt;- read_csv(&quot;data/iris.csv&quot;) # Check for missing values colSums(is.na(df)) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 0 0 0 0 0 "],["renaming-columns.html", "7 How to Rename Columns in a Dataset in Python and R 7.1 Python Code 7.2 R Code", " 7 How to Rename Columns in a Dataset in Python and R Explanation Renaming columns makes datasets easier to work with, especially if column names are long or unclear. In Python, df.rename(columns={}) allows renaming specific columns. In R, colnames(df) &lt;- c(…) is used to rename all columns at once, or names(df)[index] &lt;- “new_name” for renaming specific ones. 7.1 Python Code import pandas as pd # Load dataset df = pd.read_csv(&quot;data/iris.csv&quot;) # Rename specific columns with the correct names df.rename(columns={&quot;Sepal.Length&quot;: &quot;sepal_length&quot;, &quot;Sepal.Width&quot;: &quot;sepal_width&quot;, &quot;Petal.Length&quot;: &quot;petal_length&quot;, &quot;Petal.Width&quot;: &quot;petal_width&quot;, &quot;Species&quot;: &quot;species&quot;}, inplace=True) # Display the first few rows to confirm the changes print(df.head()) sepal_length sepal_width petal_length petal_width species 0 5.1 3.5 1.4 0.2 setosa 1 4.9 3.0 1.4 0.2 setosa 2 4.7 3.2 1.3 0.2 setosa 3 4.6 3.1 1.5 0.2 setosa 4 5.0 3.6 1.4 0.2 setosa 7.2 R Code # Load necessary library library(readr) # Load dataset from CSV file df &lt;- read_csv(&quot;data/iris.csv&quot;) # Rename all columns colnames(df) &lt;- c(&quot;sepal_length&quot;, &quot;sepal_width&quot;, &quot;petal_length&quot;, &quot;petal_width&quot;, &quot;species&quot;) # Display new column names head(df) # A tibble: 6 × 5 sepal_length sepal_width petal_length petal_width species &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 4 4.6 3.1 1.5 0.2 setosa 5 5 3.6 1.4 0.2 setosa 6 5.4 3.9 1.7 0.4 setosa "],["how-to-filter-rows-in-a-dataset-in-python-and-r.html", "8 How to Filter Rows in a Dataset in Python and R 8.1 R Code", " 8 How to Filter Rows in a Dataset in Python and R Explanation Filtering allows you to extract specific rows that meet a given condition. In Python, you can use boolean indexing: df[df[“column”] == value]. In R, you can use subset(df, column == value) or df[df$column == value, ]. import pandas as pd # Load dataset df = pd.read_csv(&quot;data/iris.csv&quot;) # Filter rows where species is &quot;setosa&quot; filtered_df = df[df[&quot;species&quot;] == &quot;setosa&quot;] # Display filtered rows print(filtered_df.head()) sepal_length sepal_width petal_length petal_width species 0 5.1 3.5 1.4 0.2 setosa 1 4.9 3.0 1.4 0.2 setosa 2 4.7 3.2 1.3 0.2 setosa 3 4.6 3.1 1.5 0.2 setosa 4 5.0 3.6 1.4 0.2 setosa 8.1 R Code # If necessary, install the tidyverse package if(!require(&quot;tidyverse&quot;)) {install.packages(&quot;tidyverse&quot;)} # Load the dplyr package from tidyverse library(dplyr) # Load dataset df &lt;- read_csv(&quot;data/iris.csv&quot;) # Filter rows where species is &#39;setosa&#39; setosa_df &lt;- filter(df, &quot;species&quot; == &quot;setosa&quot;) # Display the filtered dataset print(setosa_df) # A tibble: 0 × 5 # ℹ 5 variables: Sepal.Length &lt;dbl&gt;, Sepal.Width &lt;dbl&gt;, Petal.Length &lt;dbl&gt;, # Petal.Width &lt;dbl&gt;, Species &lt;chr&gt; "],["how-to-visualize-a-dataset-in-python-and-r.html", "9 How to Visualize a Dataset in Python and R 9.1 Python Code 9.2 R Code", " 9 How to Visualize a Dataset in Python and R Explanation Visualization is a powerful way to explore data. In Python, we can use matplotlib or seaborn for plotting. In R, ggplot2 is one of the most commonly used packages for visualization. We’ll create a simple scatter plot to visualize the relationship between two features: sepal length and sepal width, and color the points based on the species. 9.1 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load the dataset df = pd.read_csv(&quot;data/iris.csv&quot;) # Rename the columns to match the names you expect df.rename(columns={ &#39;Sepal.Length&#39;: &#39;sepal_length&#39;, &#39;Sepal.Width&#39;: &#39;sepal_width&#39;, &#39;Petal.Length&#39;: &#39;petal_length&#39;, &#39;Petal.Width&#39;: &#39;petal_width&#39;, &#39;Species&#39;: &#39;species&#39;}, inplace=True) # Create a scatter plot sns.scatterplot(data=df, x=&#39;sepal_length&#39;, y=&#39;sepal_width&#39;, hue=&#39;species&#39;) # Add title and labels plt.title(&quot;Sepal Length vs Sepal Width&quot;) plt.xlabel(&quot;Sepal Length (cm)&quot;) plt.ylabel(&quot;Sepal Width (cm)&quot;) # Show the plot plt.show() 9.2 R Code # Install and load necessary libraries if (!require(&quot;ggplot2&quot;)) install.packages(&quot;ggplot2&quot;) library(ggplot2) if (!require(&quot;readr&quot;)) install.packages(&quot;readr&quot;) library(readr) # Load the dataset df &lt;- read_csv(&quot;data/iris.csv&quot;) # Rename the columns to match the names you expect colnames(df) &lt;- c(&quot;sepal_length&quot;, &quot;sepal_width&quot;, &quot;petal_length&quot;, &quot;petal_width&quot;, &quot;species&quot;) # Create a scatter plot ggplot(df, aes(x = sepal_length, y = sepal_width, color = species)) + geom_point() + labs(title = &quot;Sepal Length vs Sepal Width&quot;, x = &quot;Sepal Length (cm)&quot;, y = &quot;Sepal Width (cm)&quot;) + theme_bw() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
